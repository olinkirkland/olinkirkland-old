<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Olin Kirkland</title>
    <link href="https://olinkirk.land/feed.xml" rel="self" />
    <link href="https://olinkirk.land" />
    <updated>2021-07-08T10:56:22+02:00</updated>
    <author>
        <name>Olin Kirkland</name>
    </author>
    <id>https://olinkirk.land</id>

    <entry>
        <title>Realms: A Journey into Procedurally Generated Maps</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/realms/"/>
        <id>https://olinkirk.land/realms/</id>
            <category term="Projects"/>

        <updated>2021-07-08T10:56:22+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/21/adl_2019-04-27_22-15-13.png" alt="" />
                    In 2018, I became interested in procedural generation in regards to map creation. It started with some basic procedural forest&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/21/adl_2019-04-27_22-15-13.png" alt="" />
                <p>In 2018, I became interested in procedural generation in regards to map creation. It started with some basic procedural forest generation I did when I was still working at Paul Bernhard Exhibits where a colleague and I were working toward a multi-screen strategy game about renewable energy.</p>
<p>I've always loved the sort of fantasy fiction with a map tucked in the front cover of the book. I drew inspiration from <a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">Amit Patel</a>, <a href="https://azgaar.wordpress.com/">Azgaar's Fantasy Map Generator</a>, <a href="https://heredragonsabound.blogspot.com/">Scott Turner</a>, and <a href="http://mewo2.com/notes/terrain/">Marting O'Leary</a>.</p>
<p>I pulled inspiration and motivation from world map images like these.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="3">
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/21/gallery/Western-Torfani.jpg" data-size="4048x3320"><img loading="lazy" src="https://olinkirk.land/media/posts/21/gallery/Western-Torfani-thumbnail.jpg" alt="" width="768" height="630"></a>
<figcaption>Western Torfani by Ilanthar</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/21/gallery/tumblr_ojjg6wh2y91qdwahko1_1280.jpg" data-size="1280x960"><img loading="lazy" src="https://olinkirk.land/media/posts/21/gallery/tumblr_ojjg6wh2y91qdwahko1_1280-thumbnail.jpg" alt="" width="768" height="576"></a>
<figcaption>Gondé and Ukyu by Ken Liu</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/21/gallery/tumblr_ojjg0aci6c1qdwahko1_1280.jpg" data-size="1280x967"><img loading="lazy" src="https://olinkirk.land/media/posts/21/gallery/tumblr_ojjg0aci6c1qdwahko1_1280-thumbnail.jpg" alt="" width="768" height="580"></a>
<figcaption>The Islands of Dara by Ken Liu</figcaption>
</figure>
</div></div>
<p><a href="https://ilanthar.jimdofree.com/worldbuilding-1/domhantyr/" target="_blank" rel="noopener noreferrer">Ilanthar </a>also has a great selection of maps, though their website is largely in French.</p>
<p>My end goal with Realms was to make a great big procedurally generated world complete with continents and island chains, wind directions, biomes, and a lot more. City generation within this world was also a goal, and I did some research into it. The best resource for city generation (somewhat recently kind of integrated with Azgaar’s work, more of an easter egg really) is by the procedural generation wizard Watabou and covers districts, walls, farms, roads, and rivers. You can view the <a href="https://watabou.itch.io/medieval-fantasy-city-generator" target="_blank" rel="noopener noreferrer">medieval city/town generator</a> for yourself.</p>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/21/chrome_2021-07-08_10-20-48.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-20-48-xs.png 300w ,https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-20-48-sm.png 480w ,https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-20-48-md.png 768w"  alt="" width="1777" height="988">
<figcaption >Watabou's awesome city generator creates and labels districts and noteworthy buildings</figcaption>
</figure>
<p> Other places I took inspiration were from Azgaar's Fantasy Map Generator, Amit Patel, Scott Turner's Dragons Abound, and Martin O'Leary's Fantasy Maps. Most of these programmers overlap in some way and borrow ideas from each other, and each has their own way of explaining certain concepts they've worked on making all of them crucial for a complete understanding of map generation.</p>
<p>Azgaar has the best (bar none) available map generator that can be run immediately in the browser. His work is current but unfortunately I find it hard to understand a lot of his (JavaScript) code. Nevertheless, his blog discusses in detail the approach he takes to tackling various challenges which makes it not only a fantastic starting point but also great reference material when writing parallel code.</p>
<ul>
<li><a href="https://azgaar.github.io/Fantasy-Map-Generator/">Azgaar’s Map Generator</a></li>
<li><a href="https://azgaar.wordpress.com/">Azgaar’s Dev Blog</a></li>
<li><a href="https://trello.com/b/7x832DG4/fantasy-map-generator">Azgaar’s Trello Board</a></li>
</ul>
<p>Amit Patel has several iterations of his maps, and his oldest ones were done in ActionScript, which originally got me into procedural programming. Amit’s site boasts a lot of amazing in-depth tutorials and essays on different programming concepts ranging from pathfinding to his most popular: generating random worlds.</p>
<ul>
<li><a href="https://www.redblobgames.com/">Amit Patel’s Website</a></li>
<li><a href="https://www.redblobgames.com/maps/mapgen4/">Amit Patel’s Map Generator (4)</a></li>
<li><a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">Amit Patel’s Polygonal Map Generation Blog Post</a></li>
</ul>
<p>Scott Turner has taken map generation and gone off the deep end with it. His blog doesn’t usually show actual code, but goes into a satisfying amount of detail about how he achieves his map generation. He mainly focuses on generated art, creating maps that look practically hand drawn. If you’re seeking the most advanced concepts and methods, Scott’s blog is certain to provide you with more than enough material.</p>
<ul>
<li><a href="https://heredragonsabound.blogspot.com/">Scott Turner’s Blog</a></li>
<li><a href="https://heredragonsabound.blogspot.com/2017/10/recreating-style.html">Scott Turner’s Blog: Recreating a Style</a></li>
<li><a href="https://heredragonsabound.blogspot.com/2017/03/sprucing-up-forest.html">Scott Turner’s Blog: Forest Coloring</a></li>
</ul>
<p>Martin O'Leary's Fantasy Maps are limited but they also served as an inspiration to Scott Turner and Azgaar, which makes them an important keystone in the map generating community. His post detailing his work goes into great detail and explains the map-making process intuitively and interactively. He also made a Twitter bot that posts randomly generated maps from his generator.</p>
<ul>
<li><a href="http://mewo2.com/notes/terrain/">Martin O’Leary’s Blog Post</a></li>
<li><a href="https://twitter.com/unchartedatlas">Martin O’Leary’s Uncharted Atlas Twitter Bot</a></li>
</ul>
<p>I came across some valuable additional resources as I explored the topic.</p>
<ul>
<li><a href="https://worldbuildingschool.com/real-world-maps/">Real World Maps vs Fantasy Maps</a></li>
<li><a href="https://www.polygon.com/2014/7/23/5926447/dwarf-fortress-will-crush-your-cpu-because-creating-history-is-hard">Dwarf Fortress History Generation</a></li>
<li><a href="http://rpgmaps.profantasy.com/making-a-city-part-3-2/">Profantasy’s City Making</a></li>
<li><a href="https://azgaar.wordpress.com/2018/02/08/templates-implementation-and-heightmap-editor-ui/">Azgaar’s Geographic Templates</a></li>
<li><a href="https://www.lostkingdom.net/lets-design-a-medieval-village-introduction/">Settlement Design</a></li>
<li><a href="https://worldbuilding.stackexchange.com/questions/73233/logical-location-for-cities">Logical Locations for Cities</a></li>
<li><a href="https://worldbuildingworkshop.com/2015/12/17/where-to-place-your-settlements/">Placement of Settlements</a></li>
<li><a href="https://azgaar.wordpress.com/2017/11/21/settlements/">Azgaar’s Settlement Placement</a></li>
<li><a href="https://worldbuildingworkshop.com/2015/12/17/where-to-place-your-settlements/">Medieval Military: What percentage of a population was in the military?</a></li>
<li><a href="https://www.youtube.com/watch?v=7xVOhNt3JQk">Drawing Mountains</a></li>
<li><a href="https://worldbuilding.stackexchange.com/questions/58152/are-there-any-rules-or-guidelines-about-designing-a-flag/72244#72244">Guidelines to Flag Design</a></li>
</ul>
<p>For my own map generator, dubbed "Realms", I decided to dive right in and essentially copied how Azgaar's height map is generated. A giant "sticky" mountain with a few mountains dotted around it. Raise the sea level to produce islands and continents, practically at random. Looks okay, but isn't very realistic. The map ends up with several mountains but no mountain ranges to speak of. Drop moisture on the map evenly and roll it down slopes to produce rivers.</p>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/21/rundll32_2020-09-22_11-43-31.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/21/responsive/rundll32_2020-09-22_11-43-31-xs.png 300w ,https://olinkirk.land/media/posts/21/responsive/rundll32_2020-09-22_11-43-31-sm.png 480w ,https://olinkirk.land/media/posts/21/responsive/rundll32_2020-09-22_11-43-31-md.png 768w"  alt="" width="1332" height="941">
<figcaption >Simple enough, the first iteration of the voronoi-cell map generator looks good. Shading represents height, and lines and circles represent flow and flow strength.</figcaption>
</figure>
<p>Next, I added biomes and a temperature layer to keep the south warm and the north cold. Town placement was pretty straightforward, but roads took me a while to implement.</p>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/21/chrome_2021-07-08_10-35-44.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-35-44-xs.png 300w ,https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-35-44-sm.png 480w ,https://olinkirk.land/media/posts/21/responsive/chrome_2021-07-08_10-35-44-md.png 768w"  alt="" width="2111" height="1456">
<figcaption >I created two types of forest drawing patterns with heavy inspiration from Scott Turner's work</figcaption>
</figure>
<p>I ended up getting really invested in toponymy - the way things are named. After tremendous amounts of research, I went with German as a good base language because English has too many variables (Norman and Viking invasions have left the English language riddled with peculiarities that make toponymy hard). German on the other hand simply combines common words or names into place names.</p>
<p>I put together a pretty convoluted system for naming places after trying multiple other approaches including real place names and <a href="https://www.samcodes.co.uk/project/markov-namegen/" target="_blank" rel="noopener noreferrer">markov chains</a>. These methods, while fast and easy to implement resulted in irrelevant names. For example, an inland town with an industry focused around a salt mine should probably be called something related to that. Or related to the founder of the town. Random real place names and markov chains ignore context entirely.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="3">
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/21/gallery/adl_2019-04-27_22-15-13.png" data-size="1920x974"><img loading="lazy" src="https://olinkirk.land/media/posts/21/gallery/adl_2019-04-27_22-15-13-thumbnail.png" alt="" width="768" height="390"></a>
<figcaption>Region names</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/21/gallery/adl_2019-07-30_18-56-43.png" data-size="940x882"><img loading="lazy" src="https://olinkirk.land/media/posts/21/gallery/adl_2019-07-30_18-56-43-thumbnail.png" alt="" width="768" height="721"></a>
<figcaption>Town names</figcaption>
</figure>
</div></div>
<p>I learned a ton from this project, but I started running into performance issues and got demotivated by technical debt as my code base grew.</p>
<p>You can view my <a href="https://github.com/olinkirkland/realms" target="_blank" rel="noopener noreferrer">source code</a> on GitHub or view the (inactive) <a href="https://trello.com/b/SoUEo0DZ/realms" target="_blank" rel="noopener noreferrer">Trello board</a>.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Localization</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/localization/"/>
        <id>https://olinkirk.land/localization/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-07-07T23:56:33+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/19/beeplugin_languages.png" alt="" />
                    I usually just hardcode the text on buttons, menus, and text fields. This is fast and for most of my&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/19/beeplugin_languages.png" alt="" />
                <p>I usually just hardcode the text on buttons, menus, and text fields. This is fast and for most of my purposes definitely good enough, but makes any app really hard to translate into different languages.</p>
<p>In my professional career as a software developer, I've come across a couple different methods of implementing localization and wanted to try implementing a simple form of it for my Worldmaker app. I decided on three objectives.</p>
<ol>
<li>Accessing strings needs to be simple. <code>LanguageManager.getText("foo", [], 0, false)</code> is ugly and confusing. Much easier: <code>Local.text("foo")</code></li>
<li>It has to be in JSON. No XML, no custom arrangement, just simple JSON that can be parsed in. I also happen to know the popular localization web platform <a href="https://poeditor.com/" target="_blank" rel="noopener noreferrer">POEditor</a> lets you import JSON which means outsourcing newly added languages would be a breeze.</li>
<li>Adding new dictionaries and language entries should be straightforward. If I want to localize to a new language, I should be able to easily scale up my dictionaries to meet that need.</li>
</ol>
<p>First, I created a class called <code>Local.as</code> which stores all the logic needed for the dictionaries and language-related string manipulation.</p>
<p>Let's break down what the class does. <code>Local.as</code> contains references to the JSON dictionaries, a property to keep track of the selected language, and the current dictionary of keys and terms.</p>
<p>Apart from that, a function <code>set language(id:String)</code> sets the selected language and loads the appropriate dictionary, while the static function <code>get text(id:String, args:Array = null):String</code> allows other classes to easily access the current dictionary's key entries. If an unknown key is accessed, a trace lets me know exactly what key is missing so I can enter it into the dictionary.</p>
<p>I implemented a little popup to change the language - finally the options button on the navigation bar has some use! I added pig-latin after a suggestion from a friend for testing purposes; it's easier to produce pig-latin on the fly than German or French and it looks better than lorem ipsum.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/19/adl_2021-07-07_22-32-57.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/19/responsive/adl_2021-07-07_22-32-57-xs.png 300w ,https://olinkirk.land/media/posts/19/responsive/adl_2021-07-07_22-32-57-sm.png 480w ,https://olinkirk.land/media/posts/19/responsive/adl_2021-07-07_22-32-57-md.png 768w"  alt="" width="487" height="276">
<figcaption >The highly awaited options popup</figcaption>
</figure>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/19/Untitled.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/19/responsive/Untitled-xs.png 300w ,https://olinkirk.land/media/posts/19/responsive/Untitled-sm.png 480w ,https://olinkirk.land/media/posts/19/responsive/Untitled-md.png 768w"  alt="" width="882" height="860">
<figcaption >Left: English, Right: Pig-latin</figcaption>
</figure>
<p>I'm very happy with how it turned out. One thing that I want to address in the future is the ability to change the language without having to reload the app.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Tectonic Plates</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/tectonic-plates/"/>
        <id>https://olinkirk.land/tectonic-plates/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-07-06T15:03:22+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/18/rundll32_2021-07-06_14-48-33.jpg" alt="" />
                    As discussed in my post about worldbuilding keystones, tectonic plates are a core concept that's really important to get right&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/18/rundll32_2021-07-06_14-48-33.jpg" alt="" />
                <p>As discussed in my post about <a href="https://olinkirk.land/defining-keystone-decisions/">worldbuilding keystones</a>, tectonic plates are a core concept that's really important to get right if things like mountain ranges, island chains, and realistic(ish) landmass formations. And if the resulting height map isn't at least kind of believable and follows some semblance of natural processes, nothing else will be.</p>
<p>My approach so far is a little simplistic, but I got to work out some kinks of how the different parts of the app interact with each other during the development, and due to the modular nature of how the app is structured, coming back to this step later on will be very straightforward.</p>
<blockquote>
<p><em>Tectonic plates</em> are pieces of Earth's crust and uppermost mantle.</p>
</blockquote>
<p>The theory of plate tectonics describes how these bits of crust have drifted around on the planet for the past three billion years, forming mountains when they crash into each other or trenches when they pull apart. Tectonic plates come in a variety of shapes and sizes, with each plate representing pretty distinct regions of the planet's surface.</p>
<figure class="post__image" ><img loading="lazy" src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Plates_tect2_en.svg/1200px-Plates_tect2_en.svg.png" data-is-external-image="true"  alt="" width="717" height="490">
<figcaption >Earth's tectonic plates (Wikipedia)</figcaption>
</figure>
<p>If I wanted to really simulate plate tectonics, I'd have to model the different plates, their velocities, direction, the currents of magma beneath the crust, and how the plates change shape when they collide or sink. I don't really care too much (right now) about recreating the science behind plate tectonics, though it would be interesting to model plate movement and flora/fauna evolution over time. But for the purposes of my app, I don't think it's a crucial component. And like I said earlier, I can always come back to this step and do all that stuff.</p>
<p>I decided to simplify the process into some steps:</p>
<ol>
<li>Identify tectonic plate "origins" to flood-fill from</li>
<li>Expand the plates from their origins, taking into account a user-defined "jitter" to add randomness</li>
<li>Define a type for each plate (oceanic or continental)</li>
<li>Define a direction (random) for each plate</li>
</ol>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/18/adl_2021-07-06_14-46-33.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_14-46-33-xs.png 300w ,https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_14-46-33-sm.png 480w ,https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_14-46-33-md.png 768w"  alt="" width="1896" height="1021">
<figcaption >Assigning the tectonic plates in the app</figcaption>
</figure>
<p>I've decided not to worry about wrapping my map east-west, mainly because dealing with the voronoi points wrapping/repeating is a huge hassle and I've dealt with that before. Instead, I'm just assigning any tectonic plate that touches the border of the map to be a "deep" plate. This plate type is unique to the app (and not found in real life); the height map will ignore any border between deep plates. The idea is to get a big, flat ocean around a series of continents in the middle of the map. This way I can wrap around later when it comes to pathfinding, wind, climate, etc.</p>
<p>Assigning plate types is straightforward: I want some percent of the area to belong to continental plates, so I first sort the plates from smallest to largest, then assign their type to continental one by one until the total area of continental plates exceeds the goal. I haven't decided what that percent should be yet, but I'll play around with it until I'm happy with it.</p>
<p>It's totally possible for users to create their plates from scratch (well, to place the plate origins and choose the directions/types).</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/18/adl_2021-07-06_15-01-50.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_15-01-50-xs.png 300w ,https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_15-01-50-sm.png 480w ,https://olinkirk.land/media/posts/18/responsive/adl_2021-07-06_15-01-50-md.png 768w"  alt="" width="366" height="336">
<figcaption >Editing a tectonic plate in the toolbar's plate list</figcaption>
</figure>
<p>I added a "Quick Start" feature that gets prompted from a popup when entering the step to automatically generate plates from the get-go. I assume most users will just automatically generate plate combinations until they're happy with the result.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Drawing &amp; Layers</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/drawing-and-layers/"/>
        <id>https://olinkirk.land/drawing-and-layers/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-07-06T15:03:33+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/17/chrome_2021-06-18_10-16-50.jpg" alt="" />
                    Reimplementing the Layers Pane was easier than I expected. I had a lot of work done from before and was&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/17/chrome_2021-06-18_10-16-50.jpg" alt="" />
                <p>Reimplementing the Layers Pane was easier than I expected. I had a lot of work done from before and was able to copy most of the code directly from the <a href="https://olinkirk.land/worldmaker/">previous iteration</a>.</p>
<p>The major difference for layers this time comes down to code structure. Instead of sending events to the Map class, this time the Layers Pane and the Map pane both directly access the layers ArrayCollection that's created and stored in the TaskManager's currentTask. Since it's a singleton, there's no difficulty keeping the Map and Layers Pane in sync.</p>
<p>The TaskManager itself keeps tabs on the ArrayCollection and dispatches events through the Signal singleton letting any listener to the Signal class know if a change to the Layers has occurred.</p>
<p>Each task only initially stores the unique IDs of the layers that are to be displayed for that task. The actual Layer objects are initialized when the <code>resetLayers()</code> function is called (at the end of each Task class constructor). This function is also called when the layers are reset (returned to their original visibility and arrangement).</p>
<pre>public function resetLayers():void<br>{<br>    layers.removeAll();<br>    for each (var l:String in _layerIds)<br>    {<br>        var layer:Layer = new Layer();<br>        layer.id = l;<br>        layer.visible = true;<br>        layer.allowed = true;<br>        layers.addItem(layer);<br>    }<br>}</pre>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/17/adl_2021-06-18_10-25-29.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/17/responsive/adl_2021-06-18_10-25-29-xs.png 300w ,https://olinkirk.land/media/posts/17/responsive/adl_2021-06-18_10-25-29-sm.png 480w ,https://olinkirk.land/media/posts/17/responsive/adl_2021-06-18_10-25-29-md.png 768w"  alt="" width="469" height="205">
<figcaption >Finally, a functional layers pane for the new build</figcaption>
</figure>
<p>Drawing the map itself takes on a different approach as well. The <code>onDraw(event)</code> function contains a switch by layer id, and loops over each layer in the currentTask's Layers ArrayCollection. I decided to separate the act of drawing each layer into individual functions dedicated to that particular layer's visualization.</p>
<pre>for each (var layer:Layer in layers)<br>{<br>    if (!layer.visible)<br>        continue;<br><br>    switch (layer.id)<br>    {<br>        case Layer.POINTS:<br>            drawPoints();<br>            break;<br>        case Layer.VORONOI:<br>            drawVoronoi();<br>            break;<br>        case Layer.DELAUNAY:<br>            drawDelaunay();<br>            break;<br>        case Layer.TECTONIC_PLATES:<br>            drawTectonics();<br>            break;<br>    }<br>}</pre>
<p>If a new layer is to be added to some task, the easy scalability of this approach makes it very straightforward to expand tasks without needing to delve deep into existing code.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Code Structure &amp; State Management</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/code-structure-and-state-management/"/>
        <id>https://olinkirk.land/code-structure-and-state-management/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-06-16T16:28:09+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/16/urban-construction-building-sketch-city-house-town-vector-illustration-isolated-white-background-85788471.jpg" alt="" />
                    Since the structure of the application and the user's actions revolves around tasks (keystone decisions), it feels right to build&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/16/urban-construction-building-sketch-city-house-town-vector-illustration-isolated-white-background-85788471.jpg" alt="" />
                <p>Since the structure of the application and the user's actions revolves around tasks (keystone decisions), it feels right to build the structure of the code around these as well. To do this, I decided to make a Task class that contains all the information for a task, including the task's name and references to relevant modules.</p>
<p>A singleton contains all tasks and can perform operations like setting the current task or incrementing to the next task.</p>
<p>Tasks need to have a lot of control over the application state, and be referenced to see what gets displayed and calculated. Essentially a task acts the way a game cartridge would in a gaming console - you slide on in and you could have a totally different game, but it is still controlled using the same way (a controller) and still communicates information to the user using the same methods (a screen/sound).</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/16/Task-1.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/16/responsive/Task-1-xs.png 300w ,https://olinkirk.land/media/posts/16/responsive/Task-1-sm.png 480w ,https://olinkirk.land/media/posts/16/responsive/Task-1-md.png 768w"  alt="" width="964" height="512">
<figcaption >Different events act upon the task</figcaption>
</figure>
<p>Different events (in the game console metaphor, controllers) will act on the task. It's important for each task therefore to have a function to handle any of these events. Creating an abstract Task class to inherit the other task classes from helps keep this organized.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Defining Keystone Decisions</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/defining-keystone-decisions/"/>
        <id>https://olinkirk.land/defining-keystone-decisions/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-07-07T10:21:29+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/15/L-Karniesbogen_keystone.png" alt="" />
                    My Worldmaker app centers around keystone decisions defined by the user. Each decision is a step toward generating a cool&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/15/L-Karniesbogen_keystone.png" alt="" />
                <p>My Worldmaker app centers around keystone decisions defined by the user. Each decision is a step toward generating a cool fantasy world that can be used for game development or Dungeons &amp; Dragons-style worldbuilding. Each keystone decision has its own class that handles all calculations and updates the state directly. This is the first draft.</p>
<ol>
<li><strong>Points: </strong>Determine the map points and generate the voronoi graph. The world has to be generated on a base that can be referenced and manipulated by the code. This will provide cells - the basic building blocks of the map.</li>
<li><strong>Tectonics:</strong> Make the tectonic plates. Plates are generated by a simple flood-fill algorithm. Tectonic plates have several properties that the user may define: Origin cell, strength, random-ness, color, bend type (convex or concave), bend strength, elevation, and direction.</li>
<li><strong>Terrain: </strong>Terrain is generated using <a href="https://www.nationalgeographic.com/science/article/plate-tectonics" target="_blank" rel="noopener noreferrer">tectonic plate boundary rules</a>. Sea level, terrain randomness and coastal erosion are also set here.</li>
<li><strong>Islands: </strong>Because islands are kind of ignored by my tectonics and terrain generation algorithms, I think it's appropriate to add them in their own step. Island clusters can be a unique tectonic cell type and are <a href="https://www.worldatlas.com/articles/how-many-types-of-islands-are-there.html" target="_blank" rel="noopener noreferrer">generated for special cases</a>.</li>
<li><strong>Temperature: </strong>Poles are cold, equator is warm. Let users define the temperature gradient and equator.</li>
<li><strong>Wind: </strong>This one's going to be difficult, but essentially determine which direction wind flows, globally. Atmospheric pressure simulation? <a href="https://media.springernature.com/lw785/springer-static/image/prt%3A978-0-387-30749-7%2F19/MediaObjects/978-0-387-30749-7_19_Part_Fig21_HTML.jpg" target="_blank" rel="noopener noreferrer">Hmm.</a></li>
<li><strong>Moisture:</strong> Wind and temperature defines how much water wind picks up from the ocean and dumped on land.</li>
<li><strong>Rivers</strong>: Use moisture values to determine where rivers flow to the sea.</li>
<li><strong>Biomes: </strong>Use rainfall and temperature to determine biomes.</li>
<li><strong>Flora &amp; Fauna: </strong>Generate flora and fauna from a list of plants and animals. Users can define what flora &amp; fauna are allowed/disallowed from the source list.</li>
<li><strong>Regions: </strong>Generate initial nodes where towns can spawn, and the regions around them. Each node defines the desirability and resources of the possible town. Think of regions as simply the area around a town.</li>
<li><strong>Tribes: </strong>Generate tribes of people with unique languages and spawn them in different parts of the world. Flood fill them, and they will build towns on owned nodes and name regions they are familiar with.</li>
<li><strong>Timeline Simulation</strong>: The end-point of the generator. Step through a linear a linear flow of time, generating events and moving characters and armies. Use Crusader Kings, Total War, Civilization, and other grand strategy games as a reference point.</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>(re)Planning Worldmaker</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/replanning-worldmaker/"/>
        <id>https://olinkirk.land/replanning-worldmaker/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-06-16T16:28:25+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/14/adl_2021-05-14_11-14-33.png" alt="" />
                    A decent amount of work has gone into Worldmaker, and I kind of knew at the back of my head&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/14/adl_2021-05-14_11-14-33.png" alt="" />
                <p>A decent amount of work has gone into Worldmaker, and I kind of knew at the back of my head that there would need to be a rework but I didn't expect to do it this soon.</p>
<p>The core concept behind Worldmaker is putting the user behind the wheel of <strong>keystone decisions</strong>, called "Tasks" in the app. I realize now that I should have planned out a larger number of these before jumping into the code.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/14/chrome_2021-05-14_14-15-56.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/14/responsive/chrome_2021-05-14_14-15-56-xs.png 300w ,https://olinkirk.land/media/posts/14/responsive/chrome_2021-05-14_14-15-56-sm.png 480w ,https://olinkirk.land/media/posts/14/responsive/chrome_2021-05-14_14-15-56-md.png 768w"  alt="" width="461" height="430">
<figcaption >All tasks can be viewed in one handy popup</figcaption>
</figure>
<p>As development progressed, I realized that it's really important that these tasks and their associated code:</p>
<ol>
<li>Are <strong>modular</strong></li>
<li>Can easily have new ones added or inserted</li>
<li>Have easy <strong>access </strong>to the state</li>
</ol>
<p>Unfortunately as I worked, I realized I had dug myself a pretty convoluted hole of a structure where a lot of the logic was performed within the "toolbar" - a UI element appearing on the right side of the screen, and due to the state's decidedly untyped nature, things got hard to understand fast, especially if I hadn't worked on it in a few days.</p>
<p>The first task is more of a test case than anything. It requires the user to read a short introduction text in the toolbar, then continue to the next task.</p>
<figure class="post__image post__image--center" ><img loading="lazy" src="https://olinkirk.land/media/posts/14/adl_2021-05-14_10-24-26.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/14/responsive/adl_2021-05-14_10-24-26-xs.png 300w ,https://olinkirk.land/media/posts/14/responsive/adl_2021-05-14_10-24-26-sm.png 480w ,https://olinkirk.land/media/posts/14/responsive/adl_2021-05-14_10-24-26-md.png 768w"  alt="" width="1896" height="1021">
<figcaption >The first task</figcaption>
</figure>
<ul>
<li><strong>Top Bar: </strong>Along the top of the screen, there's a pretty empty bar whose only real purpose is to hold the logo and the save button. In the future, app-level buttons will go here - to access options or screenshot functionality.</li>
<li><strong>Layers:</strong> On the far left, there's a layers panel that is hidden by default. Map layers can be toggled and rearranged from this panel. Layers that are not available are locked.</li>
<li><strong>The Map:</strong> In the center of the screen is the map. The map is directly changed by the state. When there's a state change event, the map redraws the affected layers.</li>
<li><strong>The Toolbar:</strong> The toolbar is where the user can affect the current task or progress to the next task. Changing options in the toolbar affects the state.</li>
</ul>
<p>User flow goes something like this:</p>
<ol>
<li>User makes a change to toolbar</li>
<li>State changes</li>
<li>Map changes to reflect state change</li>
</ol>
<p>My big mistake was not to abstract the state, and fail to create an overall modularization of the different tasks as their own classes. Since a lot of logic takes place within the toolbar itself right now, I need to figure out how to organize the code and content so that the toolbar does no logic and only forwards the desired changes to a state controller that knows what the current task is and what classes will take over the necessary calculations.</p>
<p>My next step will be to create a proper flow chart that can be referred to when crafting a new structure for the program.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="3">
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-05-26.png" data-size="1896x1021"><img loading="lazy" src="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-05-26-thumbnail.png" alt="" width="768" height="414"></a>
<figcaption>Poisson Points</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-06-08.png" data-size="1896x1021"><img loading="lazy" src="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-06-08-thumbnail.png" alt="" width="768" height="414"></a>
<figcaption>Hexagon Points</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-05-59.png" data-size="1896x1021"><img loading="lazy" src="https://olinkirk.land/media/posts/14/gallery/adl_2021-05-14_11-05-59-thumbnail.png" alt="" width="768" height="414"></a>
<figcaption>Square Points</figcaption>
</figure>
</div></div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Worldmaker</title>
        <author>
            <name>Olin Kirkland</name>
        </author>
        <link href="https://olinkirk.land/worldmaker/"/>
        <id>https://olinkirk.land/worldmaker/</id>
            <category term="Worldmaker"/>
            <category term="Blog"/>

        <updated>2021-06-16T16:28:32+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://olinkirk.land/media/posts/13/adl_2021-03-11_23-15-00.png" alt="" />
                    My world generation projects have gone through a few iterations now. First, I had "Realms", in which I did a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://olinkirk.land/media/posts/13/adl_2021-03-11_23-15-00.png" alt="" />
                <p>My world generation projects have gone through a few iterations now.</p>
<p>First, I had "Realms", in which I did a ton of cool stuff like drawing forests and rivers, generating height maps from different effects (like island shapes and preset mountain ranges), creating regions with natural boundaries like rivers, mountains, and coasts, determining the best place for cities and towns to be located, and an extensive naming system that used word combinations in English and German to produce believable medieval place names. This was really exciting to put together but the technical debt became too great in the end and I was having a lot of trouble with wind simulation, continent generation, my code structure, and miserable performance. I put down the procedural experimenting for a while.</p>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/13/chrome_2021-03-11_23-21-56.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/13/responsive/chrome_2021-03-11_23-21-56-xs.png 300w ,https://olinkirk.land/media/posts/13/responsive/chrome_2021-03-11_23-21-56-sm.png 480w ,https://olinkirk.land/media/posts/13/responsive/chrome_2021-03-11_23-21-56-md.png 768w"  alt="Realms with forests, cities, and connecting roads" width="2260" height="1461">
<figcaption >Realms with forests, cities, and connecting roads</figcaption>
</figure>
<p>Then, I decided that realms weren't enough. I wanted to make "Worlds". Realms had never felt that big, really - the regions felt kind of small and the islands produced by the generator didn't look or act like real continents. I also had had a lot of trouble with rendering mountains and wanted to do something more '3D'. So I started with Worlds. It felt really good going back to the drawing board and beginning with an eye on performance: I used a quad-tree to keep track of the voronoi cell points so that finding points would be smooth. The different logic layers like wind and hydrology were separated reasonably into different areas of the code instead of being jumbled together. The logic occurred in one place and once it was done, the map was drawn in a single step. In general, Worlds was leaps and bounds ahead of Realms.</p>
<figure class="post__image" ><img loading="lazy" src="https://olinkirk.land/media/posts/13/adl_2021-03-09_23-23-45.png" sizes="(max-width: 48em) 100vw, 100vw" srcset="https://olinkirk.land/media/posts/13/responsive/adl_2021-03-09_23-23-45-xs.png 300w ,https://olinkirk.land/media/posts/13/responsive/adl_2021-03-09_23-23-45-sm.png 480w ,https://olinkirk.land/media/posts/13/responsive/adl_2021-03-09_23-23-45-md.png 768w"  alt="Worlds with &quot;low-poly&quot; style relief shading" width="1692" height="968">
<figcaption >Worlds with "low-poly" style relief shading</figcaption>
</figure>
<p>But even so, some of the new features I added felt cumbersome. Settings were organized pretty poorly and wind still didn't work well. I thought the 3D style initially looked really good but the longer I worked with it the more tiresome it grew. I really wanted to make a stylized 2D map and the low-poly shading just wasn't doing that for me. The tectonics system I introduced was good on the surface but only about 10% of the resulting maps looked "fun".</p>
<p>Here comes Worldmaker.</p>
<ol>
<li>No longer satisfied with purely procedural maps, I want to make an application that <strong>lets the user define different "keystone" decisions</strong> that are hard to generate.</li>
<li>I want to release the app once it's functional to get feedback - and continue to <strong>release versions with improvements</strong> that enhance or replace the "keystone" decisions.</li>
<li>To do this, I decided to <strong>make a launcher</strong> first. A launcher will let users install different versions of the app and create, load, and share their own world projects.</li>
</ol>
<p>What are examples of "keystone" decisions? In Realms, only one keystone could be set: The map's seed, a number used to determine every random aspect of the map. Worlds introduced a number of settings to fine tune the map, but the map settings weren't stored with the map. Sea level, wind strength, and average temperature are all easily set keystones with a slider but something like tectonic plate design or island chains is not.</p>
<p>I want this to be a lot closer to what Azgaar does in his map generator, but more step-by-step and intuitive as far as UI goes.</p>
<div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-columns="3">
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/13/gallery/adl_2021-03-11_23-05-25.png" data-size="480x671"><img loading="lazy" src="https://olinkirk.land/media/posts/13/gallery/adl_2021-03-11_23-05-25-thumbnail.png" alt="" width="480" height="671"></a>
<figcaption>Creating a new project</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/13/gallery/adl_2021-03-11_23-09-54.png" data-size="1920x1080"><img loading="lazy" src="https://olinkirk.land/media/posts/13/gallery/adl_2021-03-11_23-09-54-thumbnail.png" alt="" width="768" height="432"></a>
<figcaption>Managing versions</figcaption>
</figure>
<figure class="gallery__item"><a href="https://olinkirk.land/media/posts/13/gallery/chrome_2021-03-01_13-21-16.png" data-size="984x734"><img loading="lazy" src="https://olinkirk.land/media/posts/13/gallery/chrome_2021-03-01_13-21-16-thumbnail.png" alt="https://dribbble.com/shots/10090105-Dashboard-UI" width="768" height="573"></a>
<figcaption>UI Design Inspiration</figcaption>
</figure>
</div></div>
<p>I've spent several evenings designing and writing the code for the different UI components in the launcher, and the style will carry over into the application itself.</p>
            ]]>
        </content>
    </entry>
</feed>
